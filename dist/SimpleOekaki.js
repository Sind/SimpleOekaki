(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
/*! Sortable 1.6.1 - MIT | git://github.com/rubaxa/Sortable.git */
!function(a){"use strict";"function"==typeof define&&define.amd?define(a):"undefined"!=typeof module&&"undefined"!=typeof module.exports?module.exports=a():window.Sortable=a()}(function(){"use strict";function a(a,b){if(!a||!a.nodeType||1!==a.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(a);this.el=a,this.options=b=t({},b),a[T]=this;var c={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(a.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,setData:function(a,b){a.setData("Text",b.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0}};for(var d in c)!(d in b)&&(b[d]=c[d]);ga(b);for(var e in this)"_"===e.charAt(0)&&"function"==typeof this[e]&&(this[e]=this[e].bind(this));this.nativeDraggable=!b.forceFallback&&$,f(a,"mousedown",this._onTapStart),f(a,"touchstart",this._onTapStart),f(a,"pointerdown",this._onTapStart),this.nativeDraggable&&(f(a,"dragover",this),f(a,"dragenter",this)),ea.push(this._onDragOver),b.store&&this.sort(b.store.get(this))}function b(a,b){"clone"!==a.lastPullMode&&(b=!0),z&&z.state!==b&&(i(z,"display",b?"none":""),b||z.state&&(a.options.group.revertClone?(A.insertBefore(z,B),a._animate(w,z)):A.insertBefore(z,w)),z.state=b)}function c(a,b,c){if(a){c=c||V;do if(">*"===b&&a.parentNode===c||r(a,b))return a;while(a=d(a))}return null}function d(a){var b=a.host;return b&&b.nodeType?b:a.parentNode}function e(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.preventDefault()}function f(a,b,c){a.addEventListener(b,c,Z)}function g(a,b,c){a.removeEventListener(b,c,Z)}function h(a,b,c){if(a)if(a.classList)a.classList[c?"add":"remove"](b);else{var d=(" "+a.className+" ").replace(R," ").replace(" "+b+" "," ");a.className=(d+(c?" "+b:"")).replace(R," ")}}function i(a,b,c){var d=a&&a.style;if(d){if(void 0===c)return V.defaultView&&V.defaultView.getComputedStyle?c=V.defaultView.getComputedStyle(a,""):a.currentStyle&&(c=a.currentStyle),void 0===b?c:c[b];b in d||(b="-webkit-"+b),d[b]=c+("string"==typeof c?"":"px")}}function j(a,b,c){if(a){var d=a.getElementsByTagName(b),e=0,f=d.length;if(c)for(;e<f;e++)c(d[e],e);return d}return[]}function k(a,b,c,d,e,f,g){a=a||b[T];var h=V.createEvent("Event"),i=a.options,j="on"+c.charAt(0).toUpperCase()+c.substr(1);h.initEvent(c,!0,!0),h.to=b,h.from=e||b,h.item=d||b,h.clone=z,h.oldIndex=f,h.newIndex=g,b.dispatchEvent(h),i[j]&&i[j].call(a,h)}function l(a,b,c,d,e,f,g,h){var i,j,k=a[T],l=k.options.onMove;return i=V.createEvent("Event"),i.initEvent("move",!0,!0),i.to=b,i.from=a,i.dragged=c,i.draggedRect=d,i.related=e||b,i.relatedRect=f||b.getBoundingClientRect(),i.willInsertAfter=h,a.dispatchEvent(i),l&&(j=l.call(k,i,g)),j}function m(a){a.draggable=!1}function n(){aa=!1}function o(a,b){var c=a.lastElementChild,d=c.getBoundingClientRect();return b.clientY-(d.top+d.height)>5||b.clientX-(d.left+d.width)>5}function p(a){for(var b=a.tagName+a.className+a.src+a.href+a.textContent,c=b.length,d=0;c--;)d+=b.charCodeAt(c);return d.toString(36)}function q(a,b){var c=0;if(!a||!a.parentNode)return-1;for(;a&&(a=a.previousElementSibling);)"TEMPLATE"===a.nodeName.toUpperCase()||">*"!==b&&!r(a,b)||c++;return c}function r(a,b){if(a){b=b.split(".");var c=b.shift().toUpperCase(),d=new RegExp("\\s("+b.join("|")+")(?=\\s)","g");return!(""!==c&&a.nodeName.toUpperCase()!=c||b.length&&((" "+a.className+" ").match(d)||[]).length!=b.length)}return!1}function s(a,b){var c,d;return function(){void 0===c&&(c=arguments,d=this,setTimeout(function(){1===c.length?a.call(d,c[0]):a.apply(d,c),c=void 0},b))}}function t(a,b){if(a&&b)for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}function u(a){return X?X(a).clone(!0)[0]:Y&&Y.dom?Y.dom(a).cloneNode(!0):a.cloneNode(!0)}function v(a){for(var b=a.getElementsByTagName("input"),c=b.length;c--;){var d=b[c];d.checked&&da.push(d)}}if("undefined"==typeof window||!window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q={},R=/\s+/g,S=/left|right|inline/,T="Sortable"+(new Date).getTime(),U=window,V=U.document,W=U.parseInt,X=U.jQuery||U.Zepto,Y=U.Polymer,Z=!1,$=!!("draggable"in V.createElement("div")),_=function(a){return!navigator.userAgent.match(/Trident.*rv[ :]?11\./)&&(a=V.createElement("x"),a.style.cssText="pointer-events:auto","auto"===a.style.pointerEvents)}(),aa=!1,ba=Math.abs,ca=Math.min,da=[],ea=[],fa=s(function(a,b,c){if(c&&b.scroll){var d,e,f,g,h,i,j=c[T],k=b.scrollSensitivity,l=b.scrollSpeed,m=a.clientX,n=a.clientY,o=window.innerWidth,p=window.innerHeight;if(E!==c&&(D=b.scroll,E=c,F=b.scrollFn,D===!0)){D=c;do if(D.offsetWidth<D.scrollWidth||D.offsetHeight<D.scrollHeight)break;while(D=D.parentNode)}D&&(d=D,e=D.getBoundingClientRect(),f=(ba(e.right-m)<=k)-(ba(e.left-m)<=k),g=(ba(e.bottom-n)<=k)-(ba(e.top-n)<=k)),f||g||(f=(o-m<=k)-(m<=k),g=(p-n<=k)-(n<=k),(f||g)&&(d=U)),Q.vx===f&&Q.vy===g&&Q.el===d||(Q.el=d,Q.vx=f,Q.vy=g,clearInterval(Q.pid),d&&(Q.pid=setInterval(function(){return i=g?g*l:0,h=f?f*l:0,"function"==typeof F?F.call(j,h,i,a):void(d===U?U.scrollTo(U.pageXOffset+h,U.pageYOffset+i):(d.scrollTop+=i,d.scrollLeft+=h))},24)))}},30),ga=function(a){function b(a,b){return void 0!==a&&a!==!0||(a=c.name),"function"==typeof a?a:function(c,d){var e=d.options.group.name;return b?a:a&&(a.join?a.indexOf(e)>-1:e==a)}}var c={},d=a.group;d&&"object"==typeof d||(d={name:d}),c.name=d.name,c.checkPull=b(d.pull,!0),c.checkPut=b(d.put),c.revertClone=d.revertClone,a.group=c};a.prototype={constructor:a,_onTapStart:function(a){var b,d=this,e=this.el,f=this.options,g=f.preventOnFilter,h=a.type,i=a.touches&&a.touches[0],j=(i||a).target,l=a.target.shadowRoot&&a.path&&a.path[0]||j,m=f.filter;if(v(e),!w&&!(/mousedown|pointerdown/.test(h)&&0!==a.button||f.disabled)&&(j=c(j,f.draggable,e),j&&C!==j)){if(b=q(j,f.draggable),"function"==typeof m){if(m.call(this,a,j,this))return k(d,l,"filter",j,e,b),void(g&&a.preventDefault())}else if(m&&(m=m.split(",").some(function(a){if(a=c(l,a.trim(),e))return k(d,a,"filter",j,e,b),!0})))return void(g&&a.preventDefault());f.handle&&!c(l,f.handle,e)||this._prepareDragStart(a,i,j,b)}},_prepareDragStart:function(a,b,c,d){var e,g=this,i=g.el,l=g.options,n=i.ownerDocument;c&&!w&&c.parentNode===i&&(N=a,A=i,w=c,x=w.parentNode,B=w.nextSibling,C=c,L=l.group,J=d,this._lastX=(b||a).clientX,this._lastY=(b||a).clientY,w.style["will-change"]="transform",e=function(){g._disableDelayedDrag(),w.draggable=g.nativeDraggable,h(w,l.chosenClass,!0),g._triggerDragStart(a,b),k(g,A,"choose",w,A,J)},l.ignore.split(",").forEach(function(a){j(w,a.trim(),m)}),f(n,"mouseup",g._onDrop),f(n,"touchend",g._onDrop),f(n,"touchcancel",g._onDrop),f(n,"pointercancel",g._onDrop),f(n,"selectstart",g),l.delay?(f(n,"mouseup",g._disableDelayedDrag),f(n,"touchend",g._disableDelayedDrag),f(n,"touchcancel",g._disableDelayedDrag),f(n,"mousemove",g._disableDelayedDrag),f(n,"touchmove",g._disableDelayedDrag),f(n,"pointermove",g._disableDelayedDrag),g._dragStartTimer=setTimeout(e,l.delay)):e())},_disableDelayedDrag:function(){var a=this.el.ownerDocument;clearTimeout(this._dragStartTimer),g(a,"mouseup",this._disableDelayedDrag),g(a,"touchend",this._disableDelayedDrag),g(a,"touchcancel",this._disableDelayedDrag),g(a,"mousemove",this._disableDelayedDrag),g(a,"touchmove",this._disableDelayedDrag),g(a,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(a,b){b=b||("touch"==a.pointerType?a:null),b?(N={target:w,clientX:b.clientX,clientY:b.clientY},this._onDragStart(N,"touch")):this.nativeDraggable?(f(w,"dragend",this),f(A,"dragstart",this._onDragStart)):this._onDragStart(N,!0);try{V.selection?setTimeout(function(){V.selection.empty()}):window.getSelection().removeAllRanges()}catch(a){}},_dragStarted:function(){if(A&&w){var b=this.options;h(w,b.ghostClass,!0),h(w,b.dragClass,!1),a.active=this,k(this,A,"start",w,A,J)}else this._nulling()},_emulateDragOver:function(){if(O){if(this._lastX===O.clientX&&this._lastY===O.clientY)return;this._lastX=O.clientX,this._lastY=O.clientY,_||i(y,"display","none");var a=V.elementFromPoint(O.clientX,O.clientY),b=a,c=ea.length;if(b)do{if(b[T]){for(;c--;)ea[c]({clientX:O.clientX,clientY:O.clientY,target:a,rootEl:b});break}a=b}while(b=b.parentNode);_||i(y,"display","")}},_onTouchMove:function(b){if(N){var c=this.options,d=c.fallbackTolerance,e=c.fallbackOffset,f=b.touches?b.touches[0]:b,g=f.clientX-N.clientX+e.x,h=f.clientY-N.clientY+e.y,j=b.touches?"translate3d("+g+"px,"+h+"px,0)":"translate("+g+"px,"+h+"px)";if(!a.active){if(d&&ca(ba(f.clientX-this._lastX),ba(f.clientY-this._lastY))<d)return;this._dragStarted()}this._appendGhost(),P=!0,O=f,i(y,"webkitTransform",j),i(y,"mozTransform",j),i(y,"msTransform",j),i(y,"transform",j),b.preventDefault()}},_appendGhost:function(){if(!y){var a,b=w.getBoundingClientRect(),c=i(w),d=this.options;y=w.cloneNode(!0),h(y,d.ghostClass,!1),h(y,d.fallbackClass,!0),h(y,d.dragClass,!0),i(y,"top",b.top-W(c.marginTop,10)),i(y,"left",b.left-W(c.marginLeft,10)),i(y,"width",b.width),i(y,"height",b.height),i(y,"opacity","0.8"),i(y,"position","fixed"),i(y,"zIndex","100000"),i(y,"pointerEvents","none"),d.fallbackOnBody&&V.body.appendChild(y)||A.appendChild(y),a=y.getBoundingClientRect(),i(y,"width",2*b.width-a.width),i(y,"height",2*b.height-a.height)}},_onDragStart:function(a,b){var c=a.dataTransfer,d=this.options;this._offUpEvents(),L.checkPull(this,this,w,a)&&(z=u(w),z.draggable=!1,z.style["will-change"]="",i(z,"display","none"),h(z,this.options.chosenClass,!1),A.insertBefore(z,w),k(this,A,"clone",w)),h(w,d.dragClass,!0),b?("touch"===b?(f(V,"touchmove",this._onTouchMove),f(V,"touchend",this._onDrop),f(V,"touchcancel",this._onDrop),f(V,"pointermove",this._onTouchMove),f(V,"pointerup",this._onDrop)):(f(V,"mousemove",this._onTouchMove),f(V,"mouseup",this._onDrop)),this._loopId=setInterval(this._emulateDragOver,50)):(c&&(c.effectAllowed="move",d.setData&&d.setData.call(this,c,w)),f(V,"drop",this),setTimeout(this._dragStarted,0))},_onDragOver:function(d){var e,f,g,h,j=this.el,k=this.options,m=k.group,p=a.active,q=L===m,r=!1,s=k.sort;if(void 0!==d.preventDefault&&(d.preventDefault(),!k.dragoverBubble&&d.stopPropagation()),!w.animated&&(P=!0,p&&!k.disabled&&(q?s||(h=!A.contains(w)):M===this||(p.lastPullMode=L.checkPull(this,p,w,d))&&m.checkPut(this,p,w,d))&&(void 0===d.rootEl||d.rootEl===this.el))){if(fa(d,k,this.el),aa)return;if(e=c(d.target,k.draggable,j),f=w.getBoundingClientRect(),M!==this&&(M=this,r=!0),h)return b(p,!0),x=A,void(z||B?A.insertBefore(w,z||B):s||A.appendChild(w));if(0===j.children.length||j.children[0]===y||j===d.target&&o(j,d)){if(0!==j.children.length&&j.children[0]!==y&&j===d.target&&(e=j.lastElementChild),e){if(e.animated)return;g=e.getBoundingClientRect()}b(p,q),l(A,j,w,f,e,g,d)!==!1&&(w.contains(j)||(j.appendChild(w),x=j),this._animate(f,w),e&&this._animate(g,e))}else if(e&&!e.animated&&e!==w&&void 0!==e.parentNode[T]){G!==e&&(G=e,H=i(e),I=i(e.parentNode)),g=e.getBoundingClientRect();var t=g.right-g.left,u=g.bottom-g.top,v=S.test(H.cssFloat+H.display)||"flex"==I.display&&0===I["flex-direction"].indexOf("row"),C=e.offsetWidth>w.offsetWidth,D=e.offsetHeight>w.offsetHeight,E=(v?(d.clientX-g.left)/t:(d.clientY-g.top)/u)>.5,F=e.nextElementSibling,J=!1;if(v){var K=w.offsetTop,N=e.offsetTop;J=K===N?e.previousElementSibling===w&&!C||E&&C:e.previousElementSibling===w||w.previousElementSibling===e?(d.clientY-g.top)/u>.5:N>K}else r||(J=F!==w&&!D||E&&D);var O=l(A,j,w,f,e,g,d,J);O!==!1&&(1!==O&&O!==-1||(J=1===O),aa=!0,setTimeout(n,30),b(p,q),w.contains(j)||(J&&!F?j.appendChild(w):e.parentNode.insertBefore(w,J?F:e)),x=w.parentNode,this._animate(f,w),this._animate(g,e))}}},_animate:function(a,b){var c=this.options.animation;if(c){var d=b.getBoundingClientRect();1===a.nodeType&&(a=a.getBoundingClientRect()),i(b,"transition","none"),i(b,"transform","translate3d("+(a.left-d.left)+"px,"+(a.top-d.top)+"px,0)"),b.offsetWidth,i(b,"transition","all "+c+"ms"),i(b,"transform","translate3d(0,0,0)"),clearTimeout(b.animated),b.animated=setTimeout(function(){i(b,"transition",""),i(b,"transform",""),b.animated=!1},c)}},_offUpEvents:function(){var a=this.el.ownerDocument;g(V,"touchmove",this._onTouchMove),g(V,"pointermove",this._onTouchMove),g(a,"mouseup",this._onDrop),g(a,"touchend",this._onDrop),g(a,"pointerup",this._onDrop),g(a,"touchcancel",this._onDrop),g(a,"pointercancel",this._onDrop),g(a,"selectstart",this)},_onDrop:function(b){var c=this.el,d=this.options;clearInterval(this._loopId),clearInterval(Q.pid),clearTimeout(this._dragStartTimer),g(V,"mousemove",this._onTouchMove),this.nativeDraggable&&(g(V,"drop",this),g(c,"dragstart",this._onDragStart)),this._offUpEvents(),b&&(P&&(b.preventDefault(),!d.dropBubble&&b.stopPropagation()),y&&y.parentNode&&y.parentNode.removeChild(y),A!==x&&"clone"===a.active.lastPullMode||z&&z.parentNode&&z.parentNode.removeChild(z),w&&(this.nativeDraggable&&g(w,"dragend",this),m(w),w.style["will-change"]="",h(w,this.options.ghostClass,!1),h(w,this.options.chosenClass,!1),k(this,A,"unchoose",w,A,J),A!==x?(K=q(w,d.draggable),K>=0&&(k(null,x,"add",w,A,J,K),k(this,A,"remove",w,A,J,K),k(null,x,"sort",w,A,J,K),k(this,A,"sort",w,A,J,K))):w.nextSibling!==B&&(K=q(w,d.draggable),K>=0&&(k(this,A,"update",w,A,J,K),k(this,A,"sort",w,A,J,K))),a.active&&(null!=K&&K!==-1||(K=J),k(this,A,"end",w,A,J,K),this.save()))),this._nulling()},_nulling:function(){A=w=x=y=B=z=C=D=E=N=O=P=K=G=H=M=L=a.active=null,da.forEach(function(a){a.checked=!0}),da.length=0},handleEvent:function(a){switch(a.type){case"drop":case"dragend":this._onDrop(a);break;case"dragover":case"dragenter":w&&(this._onDragOver(a),e(a));break;case"selectstart":a.preventDefault()}},toArray:function(){for(var a,b=[],d=this.el.children,e=0,f=d.length,g=this.options;e<f;e++)a=d[e],c(a,g.draggable,this.el)&&b.push(a.getAttribute(g.dataIdAttr)||p(a));return b},sort:function(a){var b={},d=this.el;this.toArray().forEach(function(a,e){var f=d.children[e];c(f,this.options.draggable,d)&&(b[a]=f)},this),a.forEach(function(a){b[a]&&(d.removeChild(b[a]),d.appendChild(b[a]))})},save:function(){var a=this.options.store;a&&a.set(this)},closest:function(a,b){return c(a,b||this.options.draggable,this.el)},option:function(a,b){var c=this.options;return void 0===b?c[a]:(c[a]=b,void("group"===a&&ga(c)))},destroy:function(){var a=this.el;a[T]=null,g(a,"mousedown",this._onTapStart),g(a,"touchstart",this._onTapStart),g(a,"pointerdown",this._onTapStart),this.nativeDraggable&&(g(a,"dragover",this),g(a,"dragenter",this)),Array.prototype.forEach.call(a.querySelectorAll("[draggable]"),function(a){a.removeAttribute("draggable")}),ea.splice(ea.indexOf(this._onDragOver),1),this._onDrop(),this.el=a=null}},f(V,"touchmove",function(b){a.active&&b.preventDefault()});try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){Z={capture:!1,passive:!1}}}))}catch(a){}return a.utils={on:f,off:g,css:i,find:j,is:function(a,b){return!!c(a,b,a)},extend:t,throttle:s,closest:c,toggleClass:h,clone:u,index:q},a.create=function(b,c){return new a(b,c)},a.version="1.6.1",a});
},{}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// const fs = require('fs');
// const iro = require('iro');
var SimpleOekakiCanvas = require('./SimpleOekakiCanvas.js');
var utils = require('./utils.js');
var Sortable = require('../../node_modules/sortablejs/Sortable.min.js');

var SimpleOekaki = function (_SimpleOekakiCanvas) {
  _inherits(SimpleOekaki, _SimpleOekakiCanvas);

  function SimpleOekaki(div) {
    _classCallCheck(this, SimpleOekaki);

    if (div == null || div.tagName !== 'DIV') {
      throw new Error('You must provide a div as input parameter.');
    }
    // html
    var maindiv = document.createElement('div');
    maindiv.classList.add('SimpleOekaki');
    maindiv.setAttribute('oncontextmenu', 'return false;');
    var optionsholder = document.createElement('div');
    optionsholder.classList.add('optionsholder');
    var canvasholder = document.createElement('div');
    canvasholder.classList.add('canvasholder');
    var toprow = document.createElement('div');
    toprow.classList.add('optionsrow');
    var bottomrow = document.createElement('div');
    bottomrow.classList.add('optionsrow');

    var _this = _possibleConstructorReturn(this, (SimpleOekaki.__proto__ || Object.getPrototypeOf(SimpleOekaki)).call(this, canvasholder));

    _this._incSizeButton = document.createElement('i');
    _this._incSizeButton.classList.add('material-icons');
    _this._incSizeButton.classList.add('option');
    _this._incSizeButton.innerHTML = 'add';

    _this._decSizeButton = document.createElement('i');
    _this._decSizeButton.classList.add('material-icons');
    _this._decSizeButton.classList.add('option');
    _this._decSizeButton.innerHTML = 'remove';

    _this._sizeSlider = document.createElement('input');
    _this._sizeSlider.setAttribute('type', 'range');
    _this._sizeSlider.classList.add('option');
    _this._sizeSlider.step = 2;
    _this._sizeSlider.value = SimpleOekakiCanvas.DEFAULT_BRUSH_SIZE;
    _this._sizeSlider.min = SimpleOekakiCanvas.MIN_BRUSH_SIZE;
    _this._sizeSlider.max = SimpleOekakiCanvas.MAX_BRUSH_SIZE;

    _this._layerMenuOpenButton = document.createElement('i');
    _this._layerMenuOpenButton.classList.add('material-icons');
    _this._layerMenuOpenButton.classList.add('option');
    _this._layerMenuOpenButton.innerHTML = 'layers';

    _this._backgroundColorSelector = document.createElement('input');
    _this._backgroundColorSelector.setAttribute('type', 'color');
    _this._backgroundColorSelector.setAttribute('value', utils.RGBtoHTML(_this.backgroundColor));

    _this._invisibleLayerMenuOverlay = document.createElement('div');
    _this._invisibleLayerMenuOverlay.classList.add('invisible-overlay');
    _this._invisibleLayerMenuOverlay.classList.add('hidden');

    _this._layerMenu = document.createElement('div');
    _this._layerMenu.classList.add('layer-menu');
    _this._layerMenu.classList.add('hidden');

    var layerMenuOptionsHolder = document.createElement('div');
    layerMenuOptionsHolder.classList.add('optionsholder');

    var layerMenuOptionsRow = document.createElement('div');
    layerMenuOptionsRow.classList.add('optionsrow');
    layerMenuOptionsRow.classList.add('reverse');

    _this._layerMenuCloseButton = document.createElement('i');
    _this._layerMenuCloseButton.classList.add('material-icons');
    _this._layerMenuCloseButton.classList.add('option');
    _this._layerMenuCloseButton.innerHTML = 'close';

    _this._layerList = document.createElement('div');
    _this._layerList.classList.add('layer-list');
    _this._layerList.classList.add('list-group');

    _this._layers = [document.createElement('div'), document.createElement('div'), document.createElement('div')];

    _this._layers.forEach(function (layer, index) {
      layer.classList.add('layer');
      layer.classList.add('list-group-item');
      layer.classList.add('optionsholder');
      layer.setAttribute('data-layer-id', 2 - index);
      if (index === 0) layer.classList.add('selected');

      var text = document.createElement('div');
      text.classList.add('optionsrow');
      text.classList.add('layer-selector');

      var label = document.createElement('div');
      label.classList.add('option');
      label.classList.add('label');
      label.innerHTML = 'Layer ' + (3 - index);

      var options = document.createElement('div');
      options.classList.add('optionsrow');

      var visibilityButton = document.createElement('i');
      visibilityButton.classList.add('material-icons');
      visibilityButton.classList.add('option');
      visibilityButton.innerHTML = 'visibility';

      var colorSelect = document.createElement('div');
      colorSelect.classList.add('color-select');
      colorSelect.classList.add('option');
      colorSelect.classList.add('grow');

      text.appendChild(label);
      options.appendChild(visibilityButton);
      options.appendChild(colorSelect);
      layer.appendChild(text);
      layer.appendChild(options);
      _this._layerList.appendChild(layer);
    });

    Sortable.create(_this._layerList);

    _this._backgroundLayer = document.createElement('div');
    _this._backgroundLayer.classList.add('layer');
    _this._backgroundLayer.classList.add('optionsholder');
    _this._backgroundLayer.setAttribute('data-layer-id', -1);

    var text = document.createElement('div');
    text.classList.add('optionsrow');
    text.classList.add('layer-selector');

    var label = document.createElement('div');
    label.classList.add('option');
    label.classList.add('label');
    label.innerHTML = 'Background';

    var options = document.createElement('div');
    options.classList.add('optionsrow');

    var colorSelect = document.createElement('div');
    colorSelect.classList.add('color-select');
    colorSelect.classList.add('option');
    colorSelect.classList.add('grow');

    text.appendChild(label);
    _this._backgroundLayer.appendChild(text);
    options.appendChild(colorSelect);
    _this._backgroundLayer.appendChild(options);

    _this._invisibleColorMenuOverlay = document.createElement('div');
    _this._invisibleColorMenuOverlay.classList.add('invisible-overlay');
    _this._invisibleColorMenuOverlay.classList.add('hidden');

    _this._colorMenu = document.createElement('div');
    _this._colorMenu.classList.add('color-menu');
    _this._colorMenu.classList.add('hidden');

    var colorMenuOptionsHolder = document.createElement('div');
    colorMenuOptionsHolder.classList.add('optionsholder');

    var colorMenuOptionsRow = document.createElement('div');
    colorMenuOptionsRow.classList.add('optionsrow');
    colorMenuOptionsRow.classList.add('reverse');

    _this._colorMenuCloseButton = document.createElement('i');
    _this._colorMenuCloseButton.classList.add('material-icons');
    _this._colorMenuCloseButton.classList.add('option');
    _this._colorMenuCloseButton.innerHTML = 'close';

    div.appendChild(maindiv);
    maindiv.appendChild(optionsholder);
    optionsholder.appendChild(toprow);
    optionsholder.appendChild(bottomrow);
    toprow.appendChild(_this._decSizeButton);
    toprow.appendChild(_this._sizeSlider);
    toprow.appendChild(_this._incSizeButton);
    toprow.appendChild(_this._backgroundColorSelector);
    toprow.appendChild(_this._layerMenuOpenButton);
    maindiv.appendChild(canvasholder);

    maindiv.appendChild(_this._invisibleLayerMenuOverlay);
    maindiv.appendChild(_this._layerMenu);
    _this._layerMenu.appendChild(layerMenuOptionsHolder);
    layerMenuOptionsHolder.appendChild(layerMenuOptionsRow);
    layerMenuOptionsRow.appendChild(_this._layerMenuCloseButton);
    _this._layerMenu.appendChild(_this._layerList);
    _this._layerMenu.appendChild(_this._backgroundLayer);

    maindiv.appendChild(_this._invisibleColorMenuOverlay);
    maindiv.append(_this._colorMenu);
    _this._colorMenu.appendChild(colorMenuOptionsHolder);
    colorMenuOptionsHolder.appendChild(colorMenuOptionsRow);
    colorMenuOptionsRow.appendChild(_this._colorMenuCloseButton);

    _this._setHTMLInputCallbacks();
    return _this;
  }

  _createClass(SimpleOekaki, [{
    key: '_onBrushSizeChange',
    value: function _onBrushSizeChange(brushSize) {
      this._sizeSlider.value = brushSize;
    }
  }, {
    key: '_onCurrentLayerChange',
    value: function _onCurrentLayerChange(id) {
      this._layers.forEach(function (layer) {
        if (id === layer.getAttribute('data-layer-id')) {
          layer.classList.add('selected');
        } else {
          layer.classList.remove('selected');
        }
      });
    }
  }, {
    key: '_setHTMLInputCallbacks',
    value: function _setHTMLInputCallbacks() {
      var _this2 = this;

      this._decSizeButton.addEventListener('click', function () {
        _this2.brushSize -= 2;
      });
      this._incSizeButton.addEventListener('click', function () {
        _this2.brushSize += 2;
      });
      this._sizeSlider.addEventListener('change', function () {
        _this2.brushSize = parseInt(_this2._sizeSlider.value, 10);
      });
      this._backgroundColorSelector.addEventListener('input', function () {
        _this2.backgroundColor = utils.HTMLtoRGB(_this2._backgroundColorSelector.value);
      });
      this._layerMenuOpenButton.addEventListener('click', function () {
        _this2.openLayerMenu();
      });
      this._layerMenuCloseButton.addEventListener('click', function () {
        _this2.closeLayerMenu();
      });
      this._invisibleLayerMenuOverlay.addEventListener('click', function () {
        _this2.closeLayerMenu();
      });
      this._colorMenuCloseButton.addEventListener('click', function () {
        _this2.closeColorMenu();
      });
      this._invisibleColorMenuOverlay.addEventListener('click', function () {
        _this2.closeColorMenu();
      });

      Array.prototype.forEach.call(document.getElementsByClassName('layer-selector'), function (text) {
        var id = text.parentNode.getAttribute('data-layer-id');
        if (id === -1) return;
        text.addEventListener('click', function () {
          _this2.currentLayer = id;
        });
      });
    }
  }, {
    key: 'openLayerMenu',
    value: function openLayerMenu() {
      this._layerMenu.classList.remove('hidden');
      this._invisibleLayerMenuOverlay.classList.remove('hidden');
    }
  }, {
    key: 'closeLayerMenu',
    value: function closeLayerMenu() {
      this._layerMenu.classList.add('hidden');
      this._invisibleLayerMenuOverlay.classList.add('hidden');
    }
  }, {
    key: 'openColorMenu',
    value: function openColorMenu() {
      this._colorMenu.classList.remove('hidden');
      this._invisibleColorMenuOverlay.classList.remove('hidden');
    }
  }, {
    key: 'closeColorMenu',
    value: function closeColorMenu() {
      this._colorMenu.classList.add('hidden');
      this._invisibleColorMenuOverlay.classList.add('hidden');
    }
  }]);

  return SimpleOekaki;
}(SimpleOekakiCanvas);

if (typeof module !== 'undefined' && module.exports) {
  module.exports = SimpleOekaki;
}

if (window) {
  window.SimpleOekaki = SimpleOekaki;
}

},{"../../node_modules/sortablejs/Sortable.min.js":2,"./SimpleOekakiCanvas.js":4,"./utils.js":5}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var VERSION = '0.2.1';
var MIN_BRUSH_SIZE = 1;
var MAX_BRUSH_SIZE = 31;
var DEFAULT_BRUSH_SIZE = 1;

var DEFAULT_BACKGROUND_COLOR = [1, 1, 1];
var DEFAULT_LAYER_COLOR = [0, 0, 0];

var SimpleOekakiCanvas = function () {
  _createClass(SimpleOekakiCanvas, null, [{
    key: 'VERSION',

    // Constants
    get: function get() {
      return VERSION;
    }
  }, {
    key: 'MIN_BRUSH_SIZE',
    get: function get() {
      return MIN_BRUSH_SIZE;
    }
  }, {
    key: 'MAX_BRUSH_SIZE',
    get: function get() {
      return MAX_BRUSH_SIZE;
    }
  }, {
    key: 'DEFAULT_BRUSH_SIZE',
    get: function get() {
      return DEFAULT_BRUSH_SIZE;
    }
  }, {
    key: 'DEFAULT_BACKGROUND_COLOR',
    get: function get() {
      return DEFAULT_BACKGROUND_COLOR;
    }
  }, {
    key: 'DEFAULT_LAYER_COLOR',
    get: function get() {
      return DEFAULT_LAYER_COLOR;
    }
  }]);

  function SimpleOekakiCanvas(div) {
    _classCallCheck(this, SimpleOekakiCanvas);

    // Drawing state
    this._diameter = DEFAULT_BRUSH_SIZE;
    this._backgroundColor = DEFAULT_BACKGROUND_COLOR;
    this._currentLayer = 2;
    this._layerOrder = [0, 1, 2];
    this._layerColors = [DEFAULT_LAYER_COLOR, DEFAULT_LAYER_COLOR, DEFAULT_LAYER_COLOR];
    this._layerVisibility = [1, 1, 1];

    this._canvas = document.createElement('canvas');
    this._canvas.height = 800;
    this._canvas.width = 800;

    div.appendChild(this._canvas);

    // Initialize the GL context
    this._initializeGL();
    if (!this._gl) {
      throw new Error('could not create webgl context');
    }
    this._setInputCallbacks();
  }

  _createClass(SimpleOekakiCanvas, [{
    key: 'paintLine',
    value: function paintLine(x0, y0, x1, y1) {
      this._gl.useProgram(this._layerShaderProgram);
      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._canvasFBO);
      this._gl.uniform4f(this._fragmentLineUniform, Math.round(x0) + 0.5, 800 - Math.round(y0) + 0.5, Math.round(x1) + 0.5, 800 - Math.round(y1) + 0.5);
      this._gl.uniform1f(this._fragmentSizeUniform, this._diameter);
      this._gl.drawArrays(this._gl.TRIANGLE_STRIP, 0, 4);
    }
  }, {
    key: 'paintGL',
    value: function paintGL() {
      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);
      this._gl.useProgram(this._canvasShaderProgram);
      this._gl.clearColor(this._backgroundColor[0], this._backgroundColor[1], this._backgroundColor[2], 1.0);
      this._gl.clear(this._gl.COLOR_BUFFER_BIT);
      this._gl.uniform3fv(this._fragmentBackgroundColorUniform, this._backgroundColor);
      this._gl.uniform3iv(this._fragmentLayerOrderUniform, this._layerOrder);
      this._gl.uniform3fv(this._fragmentLayerVisibilityUniform, this._layerVisibility);
      this._gl.uniformMatrix3fv(this._fragmentLayerColorsUniform, false, this._layerColors[0].concat(this._layerColors[1], this._layerColors[2]));
      this._gl.drawArrays(this._gl.TRIANGLE_STRIP, 0, 4);
    }
  }, {
    key: '_getShader',
    value: function _getShader(str, type) {
      var shader = this._gl.createShader(type);
      this._gl.shaderSource(shader, str);
      this._gl.compileShader(shader);
      if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) {
        console.log('JS:Shader compile failed');
        console.log(this._gl.getShaderInfoLog(shader));
        return null;
      }
      return shader;
    }
  }, {
    key: '_initBuffers',
    value: function _initBuffers() {
      var canvasBuffer = this._gl.createBuffer();
      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, canvasBuffer);
      this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]), this._gl.STATIC_DRAW);
      this._gl.vertexAttribPointer(this._vertexPositionAttribute2, 2, this._gl.FLOAT, false, 0, 0);
      this._gl.vertexAttribPointer(this._vertexPositionAttribute, 2, this._gl.FLOAT, false, 0, 0);

      this._canvasFBO = this._gl.createFramebuffer();
      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._canvasFBO);
      this._canvasFBO.width = this._canvas.width;
      this._canvasFBO.height = this._canvas.height;

      this._canvasTexture = this._gl.createTexture();
      this._gl.bindTexture(this._gl.TEXTURE_2D, this._canvasTexture);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);
      this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._canvasFBO.width, this._canvasFBO.height, 0, this._gl.RGBA, this._gl.UNSIGNED_BYTE, null);
      this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._canvasTexture, 0);

      this._gl.clearColor(0, 0, 0, 1);
      this._gl.clear(this._gl.COLOR_BUFFER_BIT);

      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);
    }
  }, {
    key: '_initShaderProgram',
    value: function _initShaderProgram(fsh, vsh) {
      var vertexShader = this._getShader(vsh, this._gl.VERTEX_SHADER);
      var fragmentShader = this._getShader(fsh, this._gl.FRAGMENT_SHADER);
      var shaderProgram = this._gl.createProgram();
      this._gl.attachShader(shaderProgram, vertexShader);
      this._gl.attachShader(shaderProgram, fragmentShader);
      this._gl.linkProgram(shaderProgram);
      if (!this._gl.getProgramParameter(shaderProgram, this._gl.LINK_STATUS)) {
        console.log('Could not initialise shaders');
        console.log(this._gl.getProgramInfoLog(shaderProgram));
      }
      this._gl.useProgram(shaderProgram);
      var VertexPositionAttribute = this._gl.getAttribLocation(shaderProgram, 'position');
      this._gl.enableVertexAttribArray(VertexPositionAttribute);
      return shaderProgram;
    }
  }, {
    key: '_initShaders',
    value: function _initShaders() {
      var canvasVShader = "attribute vec2 position;\nvarying vec2 Texcoord;\nvoid main(void) {\n  Texcoord = (position+1.0) / 2.0;\n  gl_Position = vec4(position, 0.0, 1.0);\n}";
      var canvasFShader = "precision mediump float;\n\nvarying vec2 Texcoord;\nuniform vec3 backgroundColor;\nuniform sampler2D imageTex;\n\nuniform ivec3 layerOrder;\nuniform vec3 layerVisibility;\nuniform mat3 layerColors;\n\nvoid main(void){\n  vec4 texColor = texture2D(imageTex,Texcoord);\n\n  vec3 outputColor = backgroundColor;\n\n  for(int i = 0; i < 3; i++){\n    int currentLayer = layerOrder[i];\n\n  if(currentLayer == 0){\n      vec3 currentColor = layerColors[0];\n      float currentSet = texColor[0];\n      currentSet = currentSet * layerVisibility[0];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet); \n    } else if(currentLayer == 1){\n      vec3 currentColor = layerColors[1];\n      float currentSet = texColor[1];\n      currentSet = currentSet * layerVisibility[1];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet);\n    } else {\n      vec3 currentColor = layerColors[2];\n      float currentSet = texColor[2];\n      currentSet = currentSet * layerVisibility[2];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet);\n    }\n  }\n  gl_FragColor = vec4(outputColor,1.0);\n}";
      this._canvasShaderProgram = this._initShaderProgram(canvasFShader, canvasVShader);
      this._fragmentBackgroundColorUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'backgroundColor');
      this._fragmentLayerOrderUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'layerOrder');
      this._fragmentLayerColorsUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'layerColors');
      this._fragmentLayerVisibilityUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'layerVisibility');

      var layerVShader = "attribute vec2 position;\nvoid main(void) {\n  gl_Position = vec4(position, 0.0, 1.0);\n}";
      var layerFShader = "precision mediump float;\n\nuniform vec4 line;\nuniform float size;\n\nvoid main(void){\n  float x = gl_FragCoord.x;\n  float y = gl_FragCoord.y;\n  \n  float x1 = line[0];\n  float y1 = line[1];\n  float x2 = line[2];\n  float y2 = line[3];\n\n  float A = x - x1;\n  float B = y - y1;\n  float C = x2 - x1;\n  float D = y2 - y1;\n  \n  float dot = A * C + B * D;\n  float len_sq = C * C + D * D;\n  float param = -1.0;\n  if (len_sq != 0.0) //in case of 0 length line\n      param = dot / len_sq;\n  \n  float xx, yy;\n  \n  if (param < 0.0){\n    xx = x1;\n    yy = y1;\n  } else if(param > 1.0){\n    xx = x2;\n    yy = y2;\n  } else if(abs(C) > abs(D)){\n    xx = floor(x1 + param * C) + 0.5;\n    yy = floor(y1 + (xx - x1) / C * D) + 0.5;\n  }else{\n    yy = floor(y1 + param * D) + 0.5;\n    xx = floor(x1 + (yy - y1) / D * C) +0.5;\n  }\n  float d = distance(vec2(x,y),vec2(xx,yy));\n\n  if(d > size/2.0) discard;\n\n  gl_FragColor = vec4(1.0,1.0,1.0,1.0);\n}";
      this._layerShaderProgram = this._initShaderProgram(layerFShader, layerVShader);
      this._fragmentLineUniform = this._gl.getUniformLocation(this._layerShaderProgram, 'line');
      this._fragmentSizeUniform = this._gl.getUniformLocation(this._layerShaderProgram, 'size');
    }
  }, {
    key: '_setInputCallbacks',
    value: function _setInputCallbacks() {
      var _this = this;

      var isDown = void 0;
      var currentMousePos = void 0;
      var getMouse = function getMouse(e) {
        var bbox = _this._canvas.getBoundingClientRect();
        var mx = e.clientX - bbox.left * (_this._canvas.width / bbox.width);
        var my = e.clientY - bbox.top * (_this._canvas.height / bbox.height);
        return { x: mx, y: my };
      };

      this._canvas.addEventListener('mousedown', function (startEvent) {
        currentMousePos = getMouse(startEvent);
        _this.paintLine(currentMousePos.x, currentMousePos.y, currentMousePos.x, currentMousePos.y);
        isDown = true;
      });

      document.addEventListener('mouseup', function () {
        isDown = false;
      });
      document.addEventListener('mousemove', function (moveEvent) {
        if (!isDown) return;
        var nextPos = getMouse(moveEvent);
        _this.paintLine(currentMousePos.x, currentMousePos.y, nextPos.x, nextPos.y);
        currentMousePos = nextPos;
        moveEvent.preventDefault();
      });

      this._canvas.addEventListener('touchstart', function (startEvent) {
        currentMousePos = getMouse(startEvent.targetTouches[0]);
        _this.paintLine(currentMousePos.x, currentMousePos.y, currentMousePos.x, currentMousePos.y);
        isDown = true;
      });
      document.addEventListener('touchend', function () {
        isDown = false;
      });
      this._canvas.addEventListener('touchmove', function (moveEvent) {
        if (!isDown) return;
        moveEvent.preventDefault();

        var nextPos = getMouse(moveEvent.targetTouches[0]);

        _this.paintLine(currentMousePos.x, currentMousePos.y, nextPos.x, nextPos.y);
        currentMousePos = nextPos;
        moveEvent.stopPropagation();
        moveEvent.cancelBubble = true;
      });
    }
  }, {
    key: '_initializeGL',
    value: function _initializeGL() {
      this._gl = this._canvas.getContext('webgl') || this._canvas.getContext('experimental-webgl');
      this._gl.clearColor(0.0, 0.0, 0.0, 1.0);

      this._gl.viewport(0, 0, this._canvas.width, this._canvas.height);

      // Initialize the shader program
      this._initShaders();
      this._initBuffers();
      var self = this;
      setInterval(function () {
        self.paintGL();
      }, 15);
    }
  }, {
    key: 'backgroundColor',
    get: function get() {
      return this._backgroundColor;
    },
    set: function set(colorArray) {
      this._backgroundColor = colorArray;
      console.log('backgroundColor set:', this.backgroundColor);
    }
  }, {
    key: 'currentLayer',
    get: function get() {
      return this._currentLayer;
    },
    set: function set(id) {
      if (id === this._currentLayer) return;
      if (id >= 0 && id < 3) {
        this._currentLayer = id;
        if (this._onCurrentLayerChange) this._onCurrentLayerChange(id);
      }
    }
  }, {
    key: 'brushSize',
    get: function get() {
      return this._diameter;
    },
    set: function set(size) {
      if (size === this._diameter) return;
      this._diameter = size;
      if (this._diameter < MIN_BRUSH_SIZE) {
        this._diameter = MIN_BRUSH_SIZE;
      }
      if (this._diameter > MAX_BRUSH_SIZE) {
        this._diameter = MAX_BRUSH_SIZE;
      }
      console.log('brush size changed to', this._diameter);

      if (this._onBrushSizeChange) {
        this._onBrushSizeChange(this._diameter);
      }
    }
  }]);

  return SimpleOekakiCanvas;
}();

if (typeof module !== 'undefined' && module.exports) {
  module.exports = SimpleOekakiCanvas;
}

if (window) {
  window.SimpleOekakiCanvas = SimpleOekakiCanvas;
}

},{"fs":1}],5:[function(require,module,exports){
"use strict";

var DECtoHEX = function DECtoHEX(c) {
  var hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
};

var HTMLtoRGB = function HTMLtoRGB(htmlcolor) {
  return htmlcolor.match(/[A-Za-z0-9]{2}/g).map(function (v) {
    return parseInt(v, 16) / 255;
  });
};

var RGBtoHTML = function RGBtoHTML(rgbcolor) {
  return "#" + DECtoHEX(rgbcolor[0] * 255) + DECtoHEX(rgbcolor[1] * 255) + DECtoHEX(rgbcolor[2] * 255);
};

module.exports = {
  DECtoHEX: DECtoHEX,
  HTMLtoRGB: HTMLtoRGB,
  RGBtoHTML: RGBtoHTML
};

},{}]},{},[3])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
