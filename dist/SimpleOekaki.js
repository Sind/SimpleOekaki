(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

// const fs = require('fs');
// const iro = require('iro');
var SOcanvas = require('./SimpleOekakiCanvas.js');
var utils = require('./utils.js');

var VERSION = '0.2.0';

var SimpleOekaki = function SimpleOekaki(div) {
  if (div == null || div.tagName !== 'DIV') {
    throw 'You must provide a div as input parameter.';
  }
  var instance = {};
  // html
  var maindiv = document.createElement('div');
  maindiv.classList.add('SimpleOekaki');
  var optionsholder = document.createElement('div');
  optionsholder.classList.add('optionsholder');
  var canvasholder = document.createElement('div');
  canvasholder.classList.add('canvasholder');
  var toprow = document.createElement('div');
  toprow.classList.add('optionsrow');
  var bottomrow = document.createElement('div');
  bottomrow.classList.add('optionsrow');
  var incSizeButton = document.createElement('button');
  var decSizeButton = document.createElement('button');
  incSizeButton.innerHTML = 'increase brush';
  decSizeButton.innerHTML = 'decrease brush';
  var sizeSlider = document.createElement('input');
  sizeSlider.setAttribute('type', 'range');
  sizeSlider.step = 2;
  var backgroundColorSelector = document.createElement('input');
  backgroundColorSelector.setAttribute('type', 'color');
  var canvas = SOcanvas(canvasholder, { onBrushSizeChange: function onBrushSizeChange(brushSize) {
      sizeSlider.value = brushSize;
    } });
  sizeSlider.value = canvas.DEFAULT_BRUSH_SIZE();
  sizeSlider.min = canvas.MIN_BRUSH_SIZE();
  sizeSlider.max = canvas.MAX_BRUSH_SIZE();
  backgroundColorSelector.setAttribute('value', utils.RGBtoHTML(canvas.backgroundColor));

  div.appendChild(maindiv);
  maindiv.appendChild(optionsholder);
  optionsholder.appendChild(toprow);
  optionsholder.appendChild(bottomrow);
  toprow.appendChild(decSizeButton);
  toprow.appendChild(sizeSlider);
  toprow.appendChild(incSizeButton);
  toprow.appendChild(backgroundColorSelector);
  maindiv.appendChild(canvasholder);

  instance.version = function () {
    return VERSION;
  };

  var setInputCallbacks = function setInputCallbacks() {
    decSizeButton.addEventListener('click', function () {
      canvas.decBrushSize();
    });
    incSizeButton.addEventListener('click', function () {
      canvas.incBrushSize();
    });
    sizeSlider.addEventListener('change', function () {
      canvas.setBrushSize(parseInt(sizeSlider.value));
    });

    backgroundColorSelector.addEventListener('input', function () {
      canvas.setBackgroundColor(utils.HTMLtoRGB(backgroundColorSelector.value));
    });
  };
  setInputCallbacks();
  return instance;
};

if (typeof module !== 'undefined' && module.exports) {
  module.exports = SimpleOekaki;
}

if (window) {
  window.SimpleOekaki = SimpleOekaki;
}

},{"./SimpleOekakiCanvas.js":3,"./utils.js":4}],3:[function(require,module,exports){
'use strict';



var MIN_BRUSH_SIZE = 1;
var MAX_BRUSH_SIZE = 31;
var DEFAULT_BRUSH_SIZE = 1;

var DEFAULT_BACKGROUND_COLOR = [1, 1, 1];
var DEFAULT_LAYER_COLOR = [0, 0, 0];

var SimpleOekakiCanvas = function SimpleOekakiCanvas(div, options) {
  var instance = {};
  instance.MIN_BRUSH_SIZE = function () {
    return MIN_BRUSH_SIZE;
  };
  instance.MAX_BRUSH_SIZE = function () {
    return MAX_BRUSH_SIZE;
  };
  instance.DEFAULT_BRUSH_SIZE = function () {
    return DEFAULT_BRUSH_SIZE;
  };
  instance.DEFAULT_BACKGROUND_COLOR = function () {
    return DEFAULT_BACKGROUND_COLOR;
  };
  instance.DEFAULT_LAYER_COLOR = function () {
    return DEFAULT_LAYER_COLOR;
  };
  // webgl
  var gl = void 0;
  var canvasFBO = void 0;
  var canvasTexture = void 0;
  var shaderProgram = void 0;
  var shaderProgram2 = void 0;
  var vertexPositionAttribute = void 0;
  var vertexPositionAttribute2 = void 0;
  var fragmentSizeUniform = void 0;
  var fragmentLineUniform = void 0;
  var fragmentBackgroundColorUniform = void 0;
  var fragmentLayerOrderUniform = void 0;
  var fragmentLayerColorsUniform = void 0;
  var fragmentLayerVisibilityUniform = void 0;

  // drawing state
  instance.diameter = DEFAULT_BRUSH_SIZE;
  instance.backgroundColor = DEFAULT_BACKGROUND_COLOR;
  var currentLayer = 0;
  var layerOrder = [0, 1, 2];
  var layerColors = [DEFAULT_LAYER_COLOR, DEFAULT_LAYER_COLOR, DEFAULT_LAYER_COLOR];
  var layerVisibility = [1, 1, 1];

  var canvas = document.createElement('canvas');
  canvas.height = 800;
  canvas.width = 800;

  div.appendChild(canvas);

  var paintLine = function paintLine(x0, y0, x1, y1) {
    gl.useProgram(shaderProgram);
    gl.bindFramebuffer(gl.FRAMEBUFFER, canvasFBO);
    gl.uniform4f(fragmentLineUniform, Math.round(x0) + 0.5, 800 - Math.round(y0) + 0.5, Math.round(x1) + 0.5, 800 - Math.round(y1) + 0.5);
    gl.uniform1f(fragmentSizeUniform, instance.diameter);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  };

  var paintGL = function paintGL() {
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.useProgram(shaderProgram2);
    gl.clearColor(instance.backgroundColor[0], instance.backgroundColor[1], instance.backgroundColor[2], 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.uniform3fv(fragmentBackgroundColorUniform, instance.backgroundColor);
    gl.uniform3iv(fragmentLayerOrderUniform, layerOrder);
    gl.uniform3fv(fragmentLayerVisibilityUniform, layerVisibility);
    gl.uniformMatrix3fv(fragmentLayerColorsUniform, false, layerColors[0].concat(layerColors[1], layerColors[2]));
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  };

  var getShader = function getShader(str, type) {
    var shader = gl.createShader(type);
    gl.shaderSource(shader, str);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.log('JS:Shader compile failed');
      console.log(gl.getShaderInfoLog(shader));
      return null;
    }
    return shader;
  };

  var initBuffers = function initBuffers() {
    var canvasBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, canvasBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]), gl.STATIC_DRAW);
    gl.vertexAttribPointer(vertexPositionAttribute2, 2, gl.FLOAT, false, 0, 0);
    gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);

    canvasFBO = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, canvasFBO);
    canvasFBO.width = canvas.width;
    canvasFBO.height = canvas.height;

    canvasTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, canvasTexture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvasFBO.width, canvasFBO.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, canvasTexture, 0);

    gl.clearColor(0, 0, 0, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  var initShaders = function initShaders() {
    var VShader = "attribute vec2 position;\nvoid main(void) {\n  gl_Position = vec4(position, 0.0, 1.0);\n}";

    var FShader = "precision mediump float;\n\nuniform vec4 line;\nuniform float size;\n\nvoid main(void){\n  float x = gl_FragCoord.x;\n  float y = gl_FragCoord.y;\n  \n  float x1 = line[0];\n  float y1 = line[1];\n  float x2 = line[2];\n  float y2 = line[3];\n\n  float A = x - x1;\n  float B = y - y1;\n  float C = x2 - x1;\n  float D = y2 - y1;\n  \n  float dot = A * C + B * D;\n  float len_sq = C * C + D * D;\n  float param = -1.0;\n  if (len_sq != 0.0) //in case of 0 length line\n      param = dot / len_sq;\n  \n  float xx, yy;\n  \n  if (param < 0.0){\n    xx = x1;\n    yy = y1;\n  } else if(param > 1.0){\n    xx = x2;\n    yy = y2;\n  } else if(abs(C) > abs(D)){\n    xx = floor(x1 + param * C) + 0.5;\n    yy = floor(y1 + (xx - x1) / C * D) + 0.5;\n  }else{\n    yy = floor(y1 + param * D) + 0.5;\n    xx = floor(x1 + (yy - y1) / D * C) +0.5;\n  }\n  float d = distance(vec2(x,y),vec2(xx,yy));\n\n  if(d > size/2.0) discard;\n\n  gl_FragColor = vec4(1.0,1.0,1.0,1.0);\n}";

    var vertexShader = getShader(VShader, gl.VERTEX_SHADER);
    var fragmentShader = getShader(FShader, gl.FRAGMENT_SHADER);
    shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      console.log('Could not initialise shaders');
      console.log(gl.getProgramInfoLog(shaderProgram));
    }
    gl.useProgram(shaderProgram);
    vertexPositionAttribute = gl.getAttribLocation(shaderProgram, 'position');
    gl.enableVertexAttribArray(vertexPositionAttribute);

    // vertexScreenResolutionUniform = gl.getUniformLocation(shaderProgram,"screenResolution");
    // vertexMousePositionUniform= gl.getUniformLocation(shaderProgram,"mousePosition");
    fragmentLineUniform = gl.getUniformLocation(shaderProgram, 'line');
    fragmentSizeUniform = gl.getUniformLocation(shaderProgram, 'size');

    var VShader2 = "attribute vec2 position;\nvarying vec2 Texcoord;\nvoid main(void) {\n  Texcoord = (position+1.0) / 2.0;\n  gl_Position = vec4(position, 0.0, 1.0);\n}";

    var FShader2 = "precision mediump float;\n\nvarying vec2 Texcoord;\nuniform vec3 backgroundColor;\nuniform sampler2D imageTex;\n\nuniform ivec3 layerOrder;\nuniform vec3 layerVisibility;\nuniform mat3 layerColors;\n\nvoid main(void){\n  vec4 texColor = texture2D(imageTex,Texcoord);\n\n  vec3 outputColor = backgroundColor;\n\n  for(int i = 0; i < 3; i++){\n    int currentLayer = layerOrder[i];\n\n  if(currentLayer == 0){\n      vec3 currentColor = layerColors[0];\n      float currentSet = texColor[0];\n      currentSet = currentSet * layerVisibility[0];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet); \n    } else if(currentLayer == 1){\n      vec3 currentColor = layerColors[1];\n      float currentSet = texColor[1];\n      currentSet = currentSet * layerVisibility[1];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet);\n    } else {\n      vec3 currentColor = layerColors[2];\n      float currentSet = texColor[2];\n      currentSet = currentSet * layerVisibility[2];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet);\n    }\n  }\n  gl_FragColor = vec4(outputColor,1.0);\n}";

    var vertexShader2 = getShader(VShader2, gl.VERTEX_SHADER);
    var fragmentShader2 = getShader(FShader2, gl.FRAGMENT_SHADER);
    shaderProgram2 = gl.createProgram();
    gl.attachShader(shaderProgram2, vertexShader2);
    gl.attachShader(shaderProgram2, fragmentShader2);
    gl.linkProgram(shaderProgram2);
    if (!gl.getProgramParameter(shaderProgram2, gl.LINK_STATUS)) {
      console.log('Could not initialise shaders');
      console.log(gl.getProgramInfoLog(shaderProgram2));
    }
    vertexPositionAttribute2 = gl.getAttribLocation(shaderProgram2, 'position');
    gl.enableVertexAttribArray(vertexPositionAttribute2);

    fragmentBackgroundColorUniform = gl.getUniformLocation(shaderProgram2, 'backgroundColor');
    fragmentLayerOrderUniform = gl.getUniformLocation(shaderProgram2, 'layerOrder');
    fragmentLayerColorsUniform = gl.getUniformLocation(shaderProgram2, 'layerColors');
    fragmentLayerVisibilityUniform = gl.getUniformLocation(shaderProgram2, 'layerVisibility');
  };

  var initializeGL = function initializeGL() {
    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    gl.clearColor(0.0, 0.0, 0.0, 1.0);

    gl.viewport(0, 0, canvas.width, canvas.height);

    // Initialize the shader program
    initShaders();
    initBuffers();
    setInterval(paintGL, 15);
  };

  instance.setBackgroundColor = function (colorArray) {
    instance.backgroundColor = colorArray;
    console.log('backgroundColor set:', instance.backgroundColor);
  };

  instance.setBrushSize = function (size) {
    console.log('d');
    if (size === instance.diameter) return;
    instance.diameter = size;
    if (instance.diameter < MIN_BRUSH_SIZE) {
      instance.diameter = MIN_BRUSH_SIZE;
    }
    if (instance.diameter > MAX_BRUSH_SIZE) {
      instance.diameter = MAX_BRUSH_SIZE;
    }
    console.log('brush size changed to', instance.diameter);

    if (options && options.onBrushSizeChange) {
      options.onBrushSizeChange(instance.diameter);
    }
  };

  instance.decBrushSize = function () {
    console.log('c');
    instance.setBrushSize(instance.diameter - 2);
  };

  instance.incBrushSize = function () {
    instance.setBrushSize(instance.diameter + 2);
  };
  var setInputCallbacks = function setInputCallbacks() {
    var isDown = void 0;
    var currentMousePos = void 0;
    var getMouse = function getMouse(e) {
      var bbox = canvas.getBoundingClientRect();
      var mx = e.clientX - bbox.left * (canvas.width / bbox.width);
      var my = e.clientY - bbox.top * (canvas.height / bbox.height);
      return { x: mx, y: my };
    };

    canvas.addEventListener('mousedown', function (startEvent) {
      currentMousePos = getMouse(startEvent);
      paintLine(currentMousePos.x, currentMousePos.y, currentMousePos.x, currentMousePos.y);
      isDown = true;
    });

    document.addEventListener('mouseup', function () {
      isDown = false;
    });
    document.addEventListener('mousemove', function (moveEvent) {
      if (!isDown) return;
      var nextPos = getMouse(moveEvent);
      paintLine(currentMousePos.x, currentMousePos.y, nextPos.x, nextPos.y);
      currentMousePos = nextPos;
      moveEvent.preventDefault();
    });

    canvas.addEventListener('touchstart', function (startEvent) {
      currentMousePos = getMouse(startEvent.targetTouches[0]);
      paintLine(currentMousePos.x, currentMousePos.y, currentMousePos.x, currentMousePos.y);
      isDown = true;
    });
    document.addEventListener('touchend', function () {
      isDown = false;
    });
    canvas.addEventListener('touchmove', function (moveEvent) {
      if (!isDown) return;
      moveEvent.preventDefault();

      var nextPos = getMouse(moveEvent.targetTouches[0]);

      paintLine(currentMousePos.x, currentMousePos.y, nextPos.x, nextPos.y);
      currentMousePos = nextPos;
      moveEvent.stopPropagation();
      moveEvent.cancelBubble = true;
    });
  };

  // Initialize the GL context
  initializeGL();
  if (!gl) {
    throw 'could not create webgl context';
  }
  setInputCallbacks();
  return instance;
};

if (typeof module !== 'undefined' && module.exports) {
  module.exports = SimpleOekakiCanvas;
}

if (window) {
  window.SimpleOekakiCanvas = SimpleOekakiCanvas;
}

},{"fs":1}],4:[function(require,module,exports){
"use strict";

var DECtoHEX = function DECtoHEX(c) {
  var hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
};

var HTMLtoRGB = function HTMLtoRGB(htmlcolor) {
  return htmlcolor.match(/[A-Za-z0-9]{2}/g).map(function (v) {
    return parseInt(v, 16) / 255;
  });
};

var RGBtoHTML = function RGBtoHTML(rgbcolor) {
  return "#" + DECtoHEX(rgbcolor[0] * 255) + DECtoHEX(rgbcolor[1] * 255) + DECtoHEX(rgbcolor[2] * 255);
};

module.exports = {
  DECtoHEX: DECtoHEX,
  HTMLtoRGB: HTMLtoRGB,
  RGBtoHTML: RGBtoHTML
};

},{}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
