(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// const fs = require('fs');
// const iro = require('iro');
var SimpleOekakiCanvas = require('./SimpleOekakiCanvas.js');
var utils = require('./utils.js');

var SimpleOekaki = function (_SimpleOekakiCanvas) {
  _inherits(SimpleOekaki, _SimpleOekakiCanvas);

  function SimpleOekaki(div) {
    _classCallCheck(this, SimpleOekaki);

    if (div == null || div.tagName !== 'DIV') {
      throw new Error('You must provide a div as input parameter.');
    }
    // html
    var maindiv = document.createElement('div');
    maindiv.classList.add('SimpleOekaki');
    var optionsholder = document.createElement('div');
    optionsholder.classList.add('optionsholder');
    var canvasholder = document.createElement('div');
    canvasholder.classList.add('canvasholder');
    var toprow = document.createElement('div');
    toprow.classList.add('optionsrow');
    var bottomrow = document.createElement('div');
    bottomrow.classList.add('optionsrow');

    var _this = _possibleConstructorReturn(this, (SimpleOekaki.__proto__ || Object.getPrototypeOf(SimpleOekaki)).call(this, canvasholder));

    _this._incSizeButton = document.createElement('i');
    _this._incSizeButton.classList.add('material-icons');
    _this._incSizeButton.classList.add('md-light');
    _this._incSizeButton.innerHTML = 'add_circle_outline';
    _this._decSizeButton = document.createElement('i');
    _this._decSizeButton.classList.add('material-icons');
    _this._decSizeButton.classList.add('md-light');
    _this._decSizeButton.innerHTML = 'remove_circle_outline';

    _this._sizeSlider = document.createElement('input');
    _this._sizeSlider.setAttribute('type', 'range');
    _this._sizeSlider.step = 2;
    _this._backgroundColorSelector = document.createElement('input');
    _this._backgroundColorSelector.setAttribute('type', 'color');
    _this._sizeSlider.value = SimpleOekakiCanvas.DEFAULT_BRUSH_SIZE;
    _this._sizeSlider.min = SimpleOekakiCanvas.MIN_BRUSH_SIZE;
    _this._sizeSlider.max = SimpleOekakiCanvas.MAX_BRUSH_SIZE;
    _this._backgroundColorSelector.setAttribute('value', utils.RGBtoHTML(_this.backgroundColor));

    div.appendChild(maindiv);
    maindiv.appendChild(optionsholder);
    optionsholder.appendChild(toprow);
    optionsholder.appendChild(bottomrow);
    toprow.appendChild(_this._decSizeButton);
    toprow.appendChild(_this._sizeSlider);
    toprow.appendChild(_this._incSizeButton);
    toprow.appendChild(_this._backgroundColorSelector);
    maindiv.appendChild(canvasholder);

    _this.setHTMLInputCallbacks();
    return _this;
  }

  _createClass(SimpleOekaki, [{
    key: 'setHTMLInputCallbacks',
    value: function setHTMLInputCallbacks() {
      var _this2 = this;

      this._decSizeButton.addEventListener('click', function () {
        _this2.brushSize -= 2;
      });
      this._incSizeButton.addEventListener('click', function () {
        _this2.brushSize += 2;
      });
      this._sizeSlider.addEventListener('change', function () {
        _this2.brushSize = parseInt(_this2._sizeSlider.value, 10);
      });
      this._backgroundColorSelector.addEventListener('input', function () {
        _this2.backgroundColor = utils.HTMLtoRGB(_this2._backgroundColorSelector.value);
      });
    }
  }, {
    key: 'onBrushSizeChange',
    value: function onBrushSizeChange(brushSize) {
      this._sizeSlider.value = brushSize;
    }
  }]);

  return SimpleOekaki;
}(SimpleOekakiCanvas);

if (typeof module !== 'undefined' && module.exports) {
  module.exports = SimpleOekaki;
}

if (window) {
  window.SimpleOekaki = SimpleOekaki;
}

},{"./SimpleOekakiCanvas.js":3,"./utils.js":4}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var VERSION = '0.2.1';
var MIN_BRUSH_SIZE = 1;
var MAX_BRUSH_SIZE = 31;
var DEFAULT_BRUSH_SIZE = 1;

var DEFAULT_BACKGROUND_COLOR = [1, 1, 1];
var DEFAULT_LAYER_COLOR = [0, 0, 0];

var SimpleOekakiCanvas = function () {
  _createClass(SimpleOekakiCanvas, null, [{
    key: 'VERSION',

    // Constants
    get: function get() {
      return VERSION;
    }
  }, {
    key: 'MIN_BRUSH_SIZE',
    get: function get() {
      return MIN_BRUSH_SIZE;
    }
  }, {
    key: 'MAX_BRUSH_SIZE',
    get: function get() {
      return MAX_BRUSH_SIZE;
    }
  }, {
    key: 'DEFAULT_BRUSH_SIZE',
    get: function get() {
      return DEFAULT_BRUSH_SIZE;
    }
  }, {
    key: 'DEFAULT_BACKGROUND_COLOR',
    get: function get() {
      return DEFAULT_BACKGROUND_COLOR;
    }
  }, {
    key: 'DEFAULT_LAYER_COLOR',
    get: function get() {
      return DEFAULT_LAYER_COLOR;
    }
  }]);

  function SimpleOekakiCanvas(div) {
    _classCallCheck(this, SimpleOekakiCanvas);

    // Drawing state
    this._diameter = DEFAULT_BRUSH_SIZE;
    this._backgroundColor = DEFAULT_BACKGROUND_COLOR;
    this._currentLayer = 0;
    this._layerOrder = [0, 1, 2];
    this._layerColors = [DEFAULT_LAYER_COLOR, DEFAULT_LAYER_COLOR, DEFAULT_LAYER_COLOR];
    this._layerVisibility = [1, 1, 1];

    this._canvas = document.createElement('canvas');
    this._canvas.height = 800;
    this._canvas.width = 800;

    div.appendChild(this._canvas);

    // Initialize the GL context
    this._initializeGL();
    if (!this._gl) {
      throw new Error('could not create webgl context');
    }
    this._setInputCallbacks();
  }

  _createClass(SimpleOekakiCanvas, [{
    key: 'paintLine',
    value: function paintLine(x0, y0, x1, y1) {
      this._gl.useProgram(this._layerShaderProgram);
      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._canvasFBO);
      this._gl.uniform4f(this._fragmentLineUniform, Math.round(x0) + 0.5, 800 - Math.round(y0) + 0.5, Math.round(x1) + 0.5, 800 - Math.round(y1) + 0.5);
      this._gl.uniform1f(this._fragmentSizeUniform, this._diameter);
      this._gl.drawArrays(this._gl.TRIANGLE_STRIP, 0, 4);
    }
  }, {
    key: 'paintGL',
    value: function paintGL() {
      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);
      this._gl.useProgram(this._canvasShaderProgram);
      this._gl.clearColor(this._backgroundColor[0], this._backgroundColor[1], this._backgroundColor[2], 1.0);
      this._gl.clear(this._gl.COLOR_BUFFER_BIT);
      this._gl.uniform3fv(this._fragmentBackgroundColorUniform, this._backgroundColor);
      this._gl.uniform3iv(this._fragmentLayerOrderUniform, this._layerOrder);
      this._gl.uniform3fv(this._fragmentLayerVisibilityUniform, this._layerVisibility);
      this._gl.uniformMatrix3fv(this._fragmentLayerColorsUniform, false, this._layerColors[0].concat(this._layerColors[1], this._layerColors[2]));
      this._gl.drawArrays(this._gl.TRIANGLE_STRIP, 0, 4);
    }
  }, {
    key: '_getShader',
    value: function _getShader(str, type) {
      var shader = this._gl.createShader(type);
      this._gl.shaderSource(shader, str);
      this._gl.compileShader(shader);
      if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) {
        console.log('JS:Shader compile failed');
        console.log(this._gl.getShaderInfoLog(shader));
        return null;
      }
      return shader;
    }
  }, {
    key: '_initBuffers',
    value: function _initBuffers() {
      var canvasBuffer = this._gl.createBuffer();
      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, canvasBuffer);
      this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]), this._gl.STATIC_DRAW);
      this._gl.vertexAttribPointer(this._vertexPositionAttribute2, 2, this._gl.FLOAT, false, 0, 0);
      this._gl.vertexAttribPointer(this._vertexPositionAttribute, 2, this._gl.FLOAT, false, 0, 0);

      this._canvasFBO = this._gl.createFramebuffer();
      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._canvasFBO);
      this._canvasFBO.width = this._canvas.width;
      this._canvasFBO.height = this._canvas.height;

      this._canvasTexture = this._gl.createTexture();
      this._gl.bindTexture(this._gl.TEXTURE_2D, this._canvasTexture);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);
      this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);
      this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._canvasFBO.width, this._canvasFBO.height, 0, this._gl.RGBA, this._gl.UNSIGNED_BYTE, null);
      this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._canvasTexture, 0);

      this._gl.clearColor(0, 0, 0, 1);
      this._gl.clear(this._gl.COLOR_BUFFER_BIT);

      this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);
    }
  }, {
    key: '_initShaderProgram',
    value: function _initShaderProgram(fsh, vsh) {
      var vertexShader = this._getShader(vsh, this._gl.VERTEX_SHADER);
      var fragmentShader = this._getShader(fsh, this._gl.FRAGMENT_SHADER);
      var shaderProgram = this._gl.createProgram();
      this._gl.attachShader(shaderProgram, vertexShader);
      this._gl.attachShader(shaderProgram, fragmentShader);
      this._gl.linkProgram(shaderProgram);
      if (!this._gl.getProgramParameter(shaderProgram, this._gl.LINK_STATUS)) {
        console.log('Could not initialise shaders');
        console.log(this._gl.getProgramInfoLog(shaderProgram));
      }
      this._gl.useProgram(shaderProgram);
      var VertexPositionAttribute = this._gl.getAttribLocation(shaderProgram, 'position');
      this._gl.enableVertexAttribArray(VertexPositionAttribute);
      return shaderProgram;
    }
  }, {
    key: '_initShaders',
    value: function _initShaders() {
      var canvasVShader = "attribute vec2 position;\nvarying vec2 Texcoord;\nvoid main(void) {\n  Texcoord = (position+1.0) / 2.0;\n  gl_Position = vec4(position, 0.0, 1.0);\n}";
      var canvasFShader = "precision mediump float;\n\nvarying vec2 Texcoord;\nuniform vec3 backgroundColor;\nuniform sampler2D imageTex;\n\nuniform ivec3 layerOrder;\nuniform vec3 layerVisibility;\nuniform mat3 layerColors;\n\nvoid main(void){\n  vec4 texColor = texture2D(imageTex,Texcoord);\n\n  vec3 outputColor = backgroundColor;\n\n  for(int i = 0; i < 3; i++){\n    int currentLayer = layerOrder[i];\n\n  if(currentLayer == 0){\n      vec3 currentColor = layerColors[0];\n      float currentSet = texColor[0];\n      currentSet = currentSet * layerVisibility[0];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet); \n    } else if(currentLayer == 1){\n      vec3 currentColor = layerColors[1];\n      float currentSet = texColor[1];\n      currentSet = currentSet * layerVisibility[1];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet);\n    } else {\n      vec3 currentColor = layerColors[2];\n      float currentSet = texColor[2];\n      currentSet = currentSet * layerVisibility[2];\n      outputColor = currentSet * currentColor + outputColor * (1.0-currentSet);\n    }\n  }\n  gl_FragColor = vec4(outputColor,1.0);\n}";
      this._canvasShaderProgram = this._initShaderProgram(canvasFShader, canvasVShader);
      this._fragmentBackgroundColorUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'backgroundColor');
      this._fragmentLayerOrderUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'layerOrder');
      this._fragmentLayerColorsUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'layerColors');
      this._fragmentLayerVisibilityUniform = this._gl.getUniformLocation(this._canvasShaderProgram, 'layerVisibility');

      var layerVShader = "attribute vec2 position;\nvoid main(void) {\n  gl_Position = vec4(position, 0.0, 1.0);\n}";
      var layerFShader = "precision mediump float;\n\nuniform vec4 line;\nuniform float size;\n\nvoid main(void){\n  float x = gl_FragCoord.x;\n  float y = gl_FragCoord.y;\n  \n  float x1 = line[0];\n  float y1 = line[1];\n  float x2 = line[2];\n  float y2 = line[3];\n\n  float A = x - x1;\n  float B = y - y1;\n  float C = x2 - x1;\n  float D = y2 - y1;\n  \n  float dot = A * C + B * D;\n  float len_sq = C * C + D * D;\n  float param = -1.0;\n  if (len_sq != 0.0) //in case of 0 length line\n      param = dot / len_sq;\n  \n  float xx, yy;\n  \n  if (param < 0.0){\n    xx = x1;\n    yy = y1;\n  } else if(param > 1.0){\n    xx = x2;\n    yy = y2;\n  } else if(abs(C) > abs(D)){\n    xx = floor(x1 + param * C) + 0.5;\n    yy = floor(y1 + (xx - x1) / C * D) + 0.5;\n  }else{\n    yy = floor(y1 + param * D) + 0.5;\n    xx = floor(x1 + (yy - y1) / D * C) +0.5;\n  }\n  float d = distance(vec2(x,y),vec2(xx,yy));\n\n  if(d > size/2.0) discard;\n\n  gl_FragColor = vec4(1.0,1.0,1.0,1.0);\n}";
      this._layerShaderProgram = this._initShaderProgram(layerFShader, layerVShader);
      this._fragmentLineUniform = this._gl.getUniformLocation(this._layerShaderProgram, 'line');
      this._fragmentSizeUniform = this._gl.getUniformLocation(this._layerShaderProgram, 'size');
    }
  }, {
    key: '_setInputCallbacks',
    value: function _setInputCallbacks() {
      var _this = this;

      var isDown = void 0;
      var currentMousePos = void 0;
      var getMouse = function getMouse(e) {
        var bbox = _this._canvas.getBoundingClientRect();
        var mx = e.clientX - bbox.left * (_this._canvas.width / bbox.width);
        var my = e.clientY - bbox.top * (_this._canvas.height / bbox.height);
        return { x: mx, y: my };
      };

      this._canvas.addEventListener('mousedown', function (startEvent) {
        currentMousePos = getMouse(startEvent);
        _this.paintLine(currentMousePos.x, currentMousePos.y, currentMousePos.x, currentMousePos.y);
        isDown = true;
      });

      document.addEventListener('mouseup', function () {
        isDown = false;
      });
      document.addEventListener('mousemove', function (moveEvent) {
        if (!isDown) return;
        var nextPos = getMouse(moveEvent);
        _this.paintLine(currentMousePos.x, currentMousePos.y, nextPos.x, nextPos.y);
        currentMousePos = nextPos;
        moveEvent.preventDefault();
      });

      this._canvas.addEventListener('touchstart', function (startEvent) {
        currentMousePos = getMouse(startEvent.targetTouches[0]);
        _this.paintLine(currentMousePos.x, currentMousePos.y, currentMousePos.x, currentMousePos.y);
        isDown = true;
      });
      document.addEventListener('touchend', function () {
        isDown = false;
      });
      this._canvas.addEventListener('touchmove', function (moveEvent) {
        if (!isDown) return;
        moveEvent.preventDefault();

        var nextPos = getMouse(moveEvent.targetTouches[0]);

        _this.paintLine(currentMousePos.x, currentMousePos.y, nextPos.x, nextPos.y);
        currentMousePos = nextPos;
        moveEvent.stopPropagation();
        moveEvent.cancelBubble = true;
      });
    }
  }, {
    key: '_initializeGL',
    value: function _initializeGL() {
      this._gl = this._canvas.getContext('webgl') || this._canvas.getContext('experimental-webgl');
      this._gl.clearColor(0.0, 0.0, 0.0, 1.0);

      this._gl.viewport(0, 0, this._canvas.width, this._canvas.height);

      // Initialize the shader program
      this._initShaders();
      this._initBuffers();
      var self = this;
      setInterval(function () {
        self.paintGL();
      }, 15);
    }
  }, {
    key: 'backgroundColor',
    get: function get() {
      return this._backgroundColor;
    },
    set: function set(colorArray) {
      this._backgroundColor = colorArray;
      console.log('backgroundColor set:', this.backgroundColor);
    }
  }, {
    key: 'brushSize',
    get: function get() {
      return this._diameter;
    },
    set: function set(size) {
      if (size === this._diameter) return;
      this._diameter = size;
      if (this._diameter < MIN_BRUSH_SIZE) {
        this._diameter = MIN_BRUSH_SIZE;
      }
      if (this._diameter > MAX_BRUSH_SIZE) {
        this._diameter = MAX_BRUSH_SIZE;
      }
      console.log('brush size changed to', this._diameter);

      if (this.onBrushSizeChange) {
        this.onBrushSizeChange(this._diameter);
      }
    }
  }]);

  return SimpleOekakiCanvas;
}();

if (typeof module !== 'undefined' && module.exports) {
  module.exports = SimpleOekakiCanvas;
}

if (window) {
  window.SimpleOekakiCanvas = SimpleOekakiCanvas;
}

},{"fs":1}],4:[function(require,module,exports){
"use strict";

var DECtoHEX = function DECtoHEX(c) {
  var hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
};

var HTMLtoRGB = function HTMLtoRGB(htmlcolor) {
  return htmlcolor.match(/[A-Za-z0-9]{2}/g).map(function (v) {
    return parseInt(v, 16) / 255;
  });
};

var RGBtoHTML = function RGBtoHTML(rgbcolor) {
  return "#" + DECtoHEX(rgbcolor[0] * 255) + DECtoHEX(rgbcolor[1] * 255) + DECtoHEX(rgbcolor[2] * 255);
};

module.exports = {
  DECtoHEX: DECtoHEX,
  HTMLtoRGB: HTMLtoRGB,
  RGBtoHTML: RGBtoHTML
};

},{}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
